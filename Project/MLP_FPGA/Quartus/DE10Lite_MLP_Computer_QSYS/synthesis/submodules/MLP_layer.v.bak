module MLP_layer #(
    parameter N_INPUTS     = 4,
    parameter N_NEURONS    = 8,
    parameter IN_WIDTH     = 16,
    parameter WGT_WIDTH    = 16,
    parameter MAC_WIDTH    = 32,
    parameter OUT_WIDTH    = 16
)(
    input  wire clk,

    // === Weight memory write interface ===
    input  wire                           wr_en,
    input  wire [$clog2(N_INPUTS)-1:0]    wr_row,  // which memory (input index)
    input  wire [$clog2(N_NEURONS)-1:0]   wr_col,  // neuron index inside memory
    input  wire [WGT_WIDTH-1:0]           wr_data,

    // === Input and control signals ===
    input  wire signed [IN_WIDTH-1:0]     input_value,
    input  wire [$clog2(N_INPUTS)-1:0]    input_index,   // external index to select memory
    input  wire [$clog2(N_NEURONS)-1:0]   neuron_index,  // external index for reading weights
    input  wire                           valid,     // triggers MAC operation
    input  wire                           start,     // clears accumulators
    input  wire                           relu_en,   // triggers output registration

    // === Output vector ===
    output reg signed [OUT_WIDTH-1:0]     outputs [N_NEURONS-1:0]
);

    // === Constants ===
    localparam signed [OUT_WIDTH-1:0] MAX_VAL = {1'b0, {(OUT_WIDTH-1){1'b1}}};

    // === Weight memory outputs ===
    wire signed [WGT_WIDTH-1:0] weight_out [N_INPUTS-1:0];

    // === MAC outputs ===
    wire signed [MAC_WIDTH-1:0] mac_outputs [N_NEURONS-1:0];

    // === Instantiate weight memories ===
    genvar i;
    generate
        for (i = 0; i < N_INPUTS; i = i + 1) begin : gen_weight_mem
            MLP_weight_mem #(
                .ADDR_WIDTH($clog2(N_NEURONS)),
                .DATA_WIDTH(WGT_WIDTH)
            ) weight_mem_i (
                .clk(clk),
                .rst(1'b0),
                .wr_en(wr_en && (wr_row == i)),
                .wr_addr(wr_col),
                .wr_data(wr_data),
                .rd_addr(neuron_index),
                .rd_data(weight_out[i])
            );
        end
    endgenerate

    // === Connect weights to MACs ===
    genvar j;
    generate
        for (j = 0; j < N_NEURONS; j = j + 1) begin : gen_mac
            MLP_mac #(
                .DATA_WIDTH(IN_WIDTH),
                .ACC_WIDTH(MAC_WIDTH)
            ) mac_j (
                .clk(clk),
                .rst(1'b0),
                .data_in(input_value),
                .weight_in(weight_out[input_index]),
                .accum_en(valid),
                .accum_clr(start),
                .accum_out(mac_outputs[j])
            );
        end
    endgenerate

    // === ReLU + Clipping stage ===
    integer n;
    
genvar out_idx;
generate
    for (out_idx = 0; out_idx < N_NEURONS; out_idx = out_idx + 1) begin : gen_outputs
        assign outputs_flat[out_idx*OUT_WIDTH +: OUT_WIDTH] =
            (relu_en && mac_outputs[out_idx] < 0) ? {OUT_WIDTH{1'b0}} :
            (relu_en && mac_outputs[out_idx] > MAX_VAL) ? MAX_VAL :
            (relu_en ? mac_outputs[out_idx][OUT_WIDTH-1:0] : {OUT_WIDTH{1'b0}});
    end
endgenerate


endmodule